# This script is provided by github.com/bool64/dev.
name: test-broken
on:
  pull_request:

# Cancel the workflow in progress in newer build is about to start.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  GO111MODULE: "on"
jobs:
  test-broken:
    strategy:
      matrix:
        go-version: [ stable ]
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Go cache
        uses: actions/cache@v4
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-cache

      - name: Test
        id: test
        continue-on-error: true
        run: |
          # First run.
          go test -tags broken -short -coverprofile=unit.coverprofile -covermode=atomic -race -json ./... 2>&1 | go run . -progress -verbosity 2 -store test-report0.jsonl -skip-report -failed-tests failed.txt -failed-builds errors.txt -
          
          # Retries.
          for i in {1..3}
          do
          test ! -f failed.txt || (export FAILED=$(cat failed.txt) && rm failed.txt && echo "Retry $i: $FAILED" && go test -tags broken -short -race -run $FAILED -json ./broken/... 2>&1 | go run . -progress -store test-report${i}.jsonl -skip-report -failed-tests failed.txt -)
          done

          # Reporting.
          REPORT=$(go run . -failure-stats failure-stats.txt -markdown test-report*.jsonl)
          echo "${REPORT}"
          
          test ! -f failed.txt || echo "Tests failed after retries: $(cat failed.txt)" 1>&2
          test ! -f failed.txt || (echo "failed=true" >> $GITHUB_OUTPUT)
          test ! -f errors.txt || (echo "failed=true" >> $GITHUB_OUTPUT)

          echo "failure-stats<<EOF" >> $GITHUB_OUTPUT && cat failure-stats.txt >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
          echo "report<<EOF" >> $GITHUB_OUTPUT && echo "$REPORT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
          go tool cover -func=./unit.coverprofile > unit.txt
          TOTAL=$(grep 'total:' unit.txt)
          echo "${TOTAL}"
          echo "total=$TOTAL" >> $GITHUB_OUTPUT

      - name: Test report
        uses: actions/upload-artifact@v4
        with:
          name: broken-test-report
          path: |
            test-report*.jsonl
            *.coverprofile
            unit.txt
            failed.txt
            errors.txt

      - name: Comment test report
        continue-on-error: true
        if: matrix.go-version == env.COV_GO_VERSION && github.event.pull_request.base.sha != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: broken-test
          message: |
            ### Broken Test

            <details><summary>Test stats: ${{ steps.test.outputs.failure-stats }}</summary>
            
            ${{ steps.test.outputs.report }}
            
            </details>

      - name: Check test result
        if: steps.test.outputs.failed == 'true'
        run: |
          echo "::error ::Test failed, see Test step for details"
          exit 1